using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;


public class Monster : MonoBehaviour
{

    /// <summary>
    /// The units movement speed
    /// </summary>
    [SerializeField]
    private float speed;

    /// <summary>
    /// The units health
    /// </summary>
    [SerializeField]
    private Stat health;

    [SerializeField]
    private Element elementType;

    private List<Debuff> debuffs = new List<Debuff>();

    private List<Debuff> debuffsToRemove = new List<Debuff>();

    private List<Debuff> newDebuffs = new List<Debuff>();



    /// <summary>
    /// The stack contains the path that the Unit can walk on 
    /// This is generated by the AStar algorithm
    /// </summary>
    private Stack<Node> path;

    private SpriteRenderer spriteRenderer;

    /// <summary>
    /// A reference to the Unit's animator
    /// </summary>
    private Animator myAnimator;

    /// <summary>
    /// The Unit's grid position 
    /// </summary>
    public Point GridPosition { get; set; }

    /// <summary>
    /// The unit's next destination 
    /// </summary>
    private Vector3 destination;

    private int damageResistance = 2;

    /// <summary>
    /// Indicates if the Unit is active
    /// </summary>
    public bool IsActive { get; set; }

    public bool IsAlive {  get { return health.CurrentVal > 0; } }

    public Element ElementType { get => elementType; }


    public float Speed { get => speed; set => speed = value; }
    public float MaxSpeed { get; set; }

    private void Update()
    {
        HandleDebuffs();
        Move();
    }

    /// <summary>
    /// Called when the script instance is being loaded
    /// </summary>
    private void Awake()
    {

        //Sets up references to the componets
        myAnimator = GetComponent<Animator>();
        spriteRenderer = GetComponent<SpriteRenderer>();
        health.Initialize();
        MaxSpeed = speed;
    }

    /// <summary>
    /// Spawns the monster in our world
    /// </summary>
    public void Spawn(int health)
    {

        transform.position = LevelManager.Instance.StartPortal.transform.position; //spawn on purple portal positon


        //this.health.HealthBar.Reset();
        this.health.MaxVal = health;
        this.health.CurrentVal = this.health.MaxVal;

   
        //Starts to scale the monster when it spawns 
        StartCoroutine(Scale(new Vector3(0.1f, 0.1f), new Vector3(18, 18), false));


        //Sets the monsters path
        SetPath(LevelManager.Instance.Path);
    }

    /// <summary>
    /// Scalesa a monster up or start
    /// </summary>
    /// <param name="from">Start scale</param>
    /// <param name="to">End scale</param>
    /// <returns></returns>
    public IEnumerator Scale(Vector3 from, Vector3 to, bool remove)
    {

        //The scaling progress
        float progress = 0;

        //As long as the progress is less than 1, then we need to keep scaling
        while ( progress <=1)
        {

            //Scales the monster
            transform.localScale = Vector3.Lerp(from, to, progress);
            progress += Time.deltaTime;
            yield return null;
        }


        //Makes sure that is has the correct scale after scaling
        transform.localScale = to;

        IsActive = true;

        if (remove)
        {
            Release();
        }

    }


    /// <summary>
    /// Makes the unit move along the given path
    /// </summary>
    private void Move()
    {
        if (IsActive)
        {

            //Move the unit towards the next destination 
            transform.position = Vector2.MoveTowards(transform.position, destination, Speed * Time.deltaTime);


            //Checks if unit has arrived at destion
            if (transform.position == destination)
            {

                //If we have a path and we have more nodes, then we need to keep checking for a new path 
                if (path != null && path.Count > 0)
                {
                    Animate(GridPosition, path.Peek().GridPosition);


                    //Sets the new gridPosition
                    GridPosition = path.Peek().GridPosition;

                    //Sets the new destination 
                    destination = path.Pop().WorldPosition;

                }
            }
        }

        

    }


    /// <summary>
    /// Gives the unit a path to walk on
    /// </summary>
    /// <param name="newPath">The units new path</param>
    private void SetPath(Stack<Node> newPath)
    {
        if ( newPath != null) //If we have a path
        {


            //Sets the new path as the current path
            this.path = newPath;

            Animate(GridPosition, path.Peek().GridPosition);

            //Sets the new gridPosition
            GridPosition = path.Peek().GridPosition;


            //Sets a new destination
            destination = path.Pop().WorldPosition;

        }

    }

    private void Animate(Point currentPos, Point newPos)
    {
        if(currentPos.Y > newPos.Y)
        {
            //Move down
            myAnimator.SetInteger("Horizontal", 0);
            myAnimator.SetInteger("Vertical", 1);

        }
        else if (currentPos.Y < newPos.Y)
        {
            //Move up
            myAnimator.SetInteger("Horizontal", 0);
            myAnimator.SetInteger("Vertical", -1);


        }
        if (currentPos.Y == newPos.Y)
        {
            if (currentPos.X > newPos.X)
            {

                //Move left
                myAnimator.SetInteger("Horizontal", -1);
                myAnimator.SetInteger("Vertical", 0);

            }
            else if (currentPos.X < newPos.X)
            {
                //Move right
                myAnimator.SetInteger("Horizontal", 1);
                myAnimator.SetInteger("Vertical", 0);

            }



        }
    }

    /// <summary>
    /// When the monster collides with something
    /// </summary>
    /// <param name="collision"></param>
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if ( collision.tag == "Exit_Portal") //if we collide with the exit portal
        {

            //Starts scaling the monster down
            StartCoroutine(Scale(new Vector3(19, 19), new Vector3(0.1f, 0.1f),true));
            
            //Plays the portal animation            
            collision.GetComponent<Portal>().Open();

            //reduce player lives
            GameManager.Instance.Lives--;
        }

        if (collision.tag == "Tile")
        {
            spriteRenderer.sortingOrder = collision.GetComponent<TileScript>().GridPosition.Y;
        }
    }

    /// <summary>
    /// Releases a monster from the game into the object pool
    /// </summary>
    public void Release()
    {

        //Removes all debuffs 
        debuffs.Clear();

        //Make sure monster is not active
        IsActive = false;

        //Make sure that is has the correct start position 
        GridPosition = LevelManager.Instance.PortalSpawn;

        //Releases the object in the object pool
        GameManager.Instance.RemoveMonster(this);

        //Removes the monster from the game
        GameManager.Instance.Pool.ReleaseObject(gameObject);

    }

    public void TakeDamage(float damage, Element dmgSource)
    {
        if (IsActive)
        {
            if (dmgSource == ElementType)
            {
                damage = damage / damageResistance;
                damageResistance++;
            }

            health.CurrentVal -= damage;

            if(health.CurrentVal <= 0)
            {

                SoundManager.Instance.PlaySFX("splat"); //slime death sound effect

                GameManager.Instance.Currency += 2;

                myAnimator.SetTrigger("Die");

                IsActive = false;

                GetComponent<SpriteRenderer>().sortingOrder--;
            }
        }
       
    }

    public void AddDebuff(Debuff debuff)
    {
        if (!debuffs.Exists(x => x.GetType() == debuff.GetType())) //if debuff does not already exist in the list (stops debuff stacks)
        {
            newDebuffs.Add(debuff);
        }

    }

    public void RemoveDebuffs(Debuff debuff)
    {
        debuffsToRemove.Add(debuff);
    }

    private void HandleDebuffs()
    {
        if (newDebuffs.Count > 0)
        {
            debuffs.AddRange(newDebuffs);

            newDebuffs.Clear();
        }


        foreach (Debuff debuff in debuffsToRemove)
        {
            debuffs.Remove(debuff);
        }

        debuffsToRemove.Clear();

        foreach( Debuff debuff in debuffs)
        {
            debuff.Update();
        }
    }

}
